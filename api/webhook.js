const { Telegraf } = require('telegraf');
const { DateTime } = require('luxon'); // –î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
const process = require('process');

const TOKEN = process.env.BOT_TOKEN;
const bot = new Telegraf(TOKEN);

let interval = null;  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
let sendTask = null;  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
let isSendingMessage = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
let timezoneOffset = 2; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC +2)

const calculateTimeToNewYear = async () => {
  const now = DateTime.local().plus({ hours: timezoneOffset });
  const newYear = DateTime.local().plus({ years: 1 }).startOf('year');
  const timeLeft = newYear.diff(now, ['days', 'hours', 'minutes', 'seconds']).toObject();

  const { days, hours, minutes, seconds } = timeLeft;
  return { days, hours, minutes, seconds };
};

const sendMessage = async (ctx, message) => {
  if (isSendingMessage) return;  // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–æ–µ

  isSendingMessage = true;
  try {
    await ctx.reply(message);
  } catch (error) {
    console.error('Error sending message:', error);
  } finally {
    isSendingMessage = false;
  }
};

const startCommand = async (ctx) => {
  await sendMessage(ctx,
    '–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /time, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞.\n' +
    'Hello! Type /time to find out how many days, minutes, and seconds are left until New Year.\n\n' +
    '/timezone <offset> - set time zone (e.g. /timezone +2 for UTC+2)\n' +
    '/interval <minutes> - set interval for automatic updates (e.g. /interval 1 for 1 minute)');
};

const timeCommand = async (ctx) => {
  const { days, hours, minutes, seconds } = await calculateTimeToNewYear();
  await sendMessage(ctx,
    `${days} –¥–Ω–µ–π, ${hours} —á–∞—Å–æ–≤, ${minutes} –º–∏–Ω—É—Ç –∏ ${seconds} —Å–µ–∫—É–Ω–¥ –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! ü•≥\n` +
    `${days} days, ${hours} hours, ${minutes} minutes, and ${seconds} seconds left until New Year! üéâ`);
};

const intervalCommand = async (ctx) => {
  const userInput = ctx.message.text.split(' ')[1];

  if (!userInput) {
    await sendMessage(ctx, 
      '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏ —á–∞—Å–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞.\n' +
      '–§–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/interval 1" –¥–ª—è 1 –º–∏–Ω—É—Ç—ã).\n' +
      '–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤–≤–µ–¥–∏—Ç–µ "/interval -".');
    return;
  }

  if (userInput === '-') {
    if (sendTask) {
      clearInterval(sendTask);
      sendTask = null;
    }
    interval = null;
    await sendMessage(ctx, '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω üò¢');
    return;
  }

  const intervalInMinutes = parseInt(userInput);
  
  if (isNaN(int
