const { Telegraf } = require('telegraf');
const { DateTime } = require('luxon'); // –î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
const process = require('process');

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TOKEN = process.env.BOT_TOKEN;
const bot = new Telegraf(TOKEN);

let interval = null;  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
let sendTask = null;  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
let timezoneOffset = 2;  // –°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞
const calculateTimeToNewYear = () => {
  const now = DateTime.local().setZone('UTC').plus({ hours: timezoneOffset });  // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É
  const newYear = DateTime.local().plus({ years: 1 }).startOf('year');  // –ù–æ–≤—ã–π –≥–æ–¥ 2026
  const remainingTime = newYear.diff(now, ['days', 'hours', 'minutes', 'seconds']).toObject();

  return remainingTime;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
const startCommand = async (ctx) => {
  await ctx.reply(
    'Hello! üòé\nHow it works?\n\n"/timezone +2" - time zone offset (for example, +2 hours)\n"/timezone -3" - time zone offset (for example, -3 hours)\n\n/time - find out how many days, hours and minutes are left until the New Year.\n\n"/interval 1440" - interval in minutes for automatic sending of messages about the time until the New Year. For 1440 minutes = a day)\nTo turn off the interval, enter "/interval -"'
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /time
const timeCommand = async (ctx) => {
  const { days, hours, minutes, seconds } = calculateTimeToNewYear();
  await ctx.reply(
    `${days} days, ${hours} hours, ${minutes} minutes and ${seconds} seconds left until New Year!\nTimezone: ${timezoneOffset}\nü•≥ü•≥ü•≥`
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /interval
const intervalCommand = async (ctx) => {
  if (!ctx.message.text.split(' ')[1]) {
    return await ctx.reply(
      'Enter the interval in minutes or hours to send messages about the time until New Year.\nInterval format: number (e.g. "/interval 1" for 1 minute).\nTo disable the interval, enter "/interval -"'
    );
  }

  if (ctx.message.text.split(' ')[1] === '-') {
    interval = null;
    if (sendTask) {
      sendTask.cancel();
    }
    sendTask = null;
    return await ctx.reply('Interval disabled üò¢');
  }

  const userInput = parseInt(ctx.message.text.split(' ')[1]);
  if (isNaN(userInput) || userInput <= 0) {
    return await ctx.reply(
      'Error! Invalid interval format.\nInterval format: number (e.g. "/interval 1" for 1 minute).\nTo disable the interval, enter "/interval -"'
    );
  }

  interval = userInput;

  await ctx.reply(`Interval set to ${interval} minutes üòç`);

  const sendMessage = async () => {
    while (interval) {
      await new Promise((resolve) => setTimeout(resolve, interval * 60 * 1000));
      const { days, hours, minutes, seconds } = calculateTimeToNewYear();
      try {
        await ctx.reply(
          `${days} days, ${hours} hours, ${minutes} minutes and ${seconds} seconds left until New Year!\nTimezone: ${timezoneOffset}\nü•≥ü•≥ü•≥\n\nThis is an automatic message! To disable, enter "/interval -" `
        );
      } catch (e) {
        console.error('Error sending message: ', e);
      }
    }
  };

  if (sendTask) {
    sendTask.cancel();
  }

  sendTask = setInterval(sendMessage, interval * 60 * 1000);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /timezone
const timezoneCommand = async (ctx) => {
  if (!ctx.message.text.split(' ')[1]) {
    return await ctx.reply('Enter the time zone offset (e.g. "/timezone +2" or "/timezone -3").');
  }

  const offset = parseInt(ctx.message.text.split(' ')[1]);
  if (isNaN(offset)) {
    return await ctx.reply('Error! Please enter a valid number (e.g. "/timezone +2" or "/timezone -3").');
  }

  timezoneOffset = offset;
  await ctx.reply(`Time zone set to: UTC ${timezoneOffset >= 0 ? `+${timezoneOffset}` : timezoneOffset} ü´°`);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command('start', startCommand);
bot.command('time', timeCommand);
bot.command('interval', intervalCommand);
bot.command('timezone', timezoneCommand);

// –°–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±—Ö—É–∫–∞–º–∏ Vercel
module.exports = async (req, res) => {
  if (req.method === 'POST') {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      await bot.handleUpdate(req.body, res);
      return res.status(200).json({ status: 'ok' });
    } catch (e) {
      console.error('Error processing update:', e);
      return res.status(500).json({ error: 'Internal Server Error' });
    }
  } else {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }
};
